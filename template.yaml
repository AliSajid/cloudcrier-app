---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloudcrier-app

  An application to periodically access the weather
  APIs and get the prediction and
  current weather data.

Globals:
  Function:
    Tracing: Active
    Runtime: python3.12
    Handler: app.lambda_handler
    Timeout: 60
    MemorySize: 128
    Architectures:
      - arm64
    LoggingConfig:
      LogFormat: JSON
      LogGroup: /aws/applications/cloudcrier_app
  Api:
    TracingEnabled: true
Resources:
  CloudCrierStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/cloudcrier.asl.json
      DefinitionSubstitutions:
        QueuingFunction: !GetAtt QueuingFunction.Arn
        NWSApiFunction: !GetAtt NWSApiFunction.Arn
        OpenWeatherApiFunction: !GetAtt OpenWeatherApiFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref WeatherDataTable
      Events:
        HourlyWeatherCheckSchedule:
          Type: Schedule
          Properties:
            Description: Schedule to run the weather check every hour
            Enabled: false
            Schedule: rate(1 hour)
      Tags:
        Name: CloudCrierStateMachine
        Environment: Production
        Application: CloudCrier
        Management: AWS SAM
        Managed: "true"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref QueuingFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref NWSApiFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref OpenWeatherApiFunction
        - DynamoDBWritePolicy:
            TableName: !Ref WeatherDataTable
        - SQSSendMessagePolicy:
            QueueName: !Ref WeatherQueue
        - SQSPollerPolicy:
            QueueName: !Ref WeatherQueue

  WeatherQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: weather-queue.fifo
      FifoQueue: true
      Tags:
        - Key: Name
          Value: WeatherQueue
        - Key: Environment
          Value: Production
        - Key: Application
          Value: CloudCrier
        - Key: Management
          Value: AWS SAM
        - Key: Managed
          Value: "true"

  QueuingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/queue_actions/
      Environment:
        Variables:
          QUEUE_NAME: !GetAtt WeatherQueue.QueueName

  NWSApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_nws_api/
      Architectures:
        - arm64

  OpenWeatherApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_openweather_api/
      Architectures:
        - arm64

  CityInputTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  WeatherDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: weather-data
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  WeatherQueue:
    Description: "Weather Queue"
    Value: !Ref WeatherQueue
    Export:
      Name: !Sub "${AWS::StackName}-WeatherQueue"

